// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using Switchcraft.Server.Web.Data;

#nullable disable

namespace Switchcraft.Server.Web.Data.Migrations
{
    [DbContext(typeof(SwitchcraftDbContext))]
    partial class SwitchcraftDbContextModelSnapshot : ModelSnapshot
    {
        protected override void BuildModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "8.0.14")
                .HasAnnotation("Relational:MaxIdentifierLength", 64);

            modelBuilder.Entity("Switchcraft.Data.Models.Application", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<DateTime?>("CreatedAt")
                        .HasColumnType("datetime(6)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("varchar(255)");

                    b.Property<DateTime?>("UpdatedAt")
                        .HasColumnType("datetime(6)");

                    b.HasKey("Id");

                    b.HasIndex("Name")
                        .IsUnique();

                    b.ToTable("Applications");
                });

            modelBuilder.Entity("Switchcraft.Data.Models.Environment", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<DateTime?>("CreatedAt")
                        .HasColumnType("datetime(6)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("varchar(255)");

                    b.Property<DateTime?>("UpdatedAt")
                        .HasColumnType("datetime(6)");

                    b.HasKey("Id");

                    b.HasIndex("Name")
                        .IsUnique();

                    b.ToTable("Environments");
                });

            modelBuilder.Entity("Switchcraft.Data.Models.Switch", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<int?>("ApplicationId")
                        .HasColumnType("int");

                    b.Property<DateTime?>("CreatedAt")
                        .HasColumnType("datetime(6)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("varchar(255)");

                    b.Property<DateTime?>("UpdatedAt")
                        .HasColumnType("datetime(6)");

                    b.HasKey("Id");

                    b.HasIndex("ApplicationId");

                    b.HasIndex("Name", "ApplicationId")
                        .IsUnique();

                    b.ToTable("Switches");
                });

            modelBuilder.Entity("Switchcraft.Data.Models.SwitchInstance", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<DateTime?>("CreatedAt")
                        .HasColumnType("datetime(6)");

                    b.Property<int?>("EnvironmentId")
                        .HasColumnType("int");

                    b.Property<bool>("IsEnabled")
                        .HasColumnType("tinyint(1)");

                    b.Property<int?>("SwitchId")
                        .HasColumnType("int");

                    b.Property<DateTime?>("UpdatedAt")
                        .HasColumnType("datetime(6)");

                    b.HasKey("Id");

                    b.HasIndex("EnvironmentId");

                    b.HasIndex("SwitchId");

                    b.ToTable("SwitchInstances");
                });

            modelBuilder.Entity("Switchcraft.Data.Models.Switch", b =>
                {
                    b.HasOne("Switchcraft.Data.Models.Application", "Application")
                        .WithMany("Switches")
                        .HasForeignKey("ApplicationId");

                    b.Navigation("Application");
                });

            modelBuilder.Entity("Switchcraft.Data.Models.SwitchInstance", b =>
                {
                    b.HasOne("Switchcraft.Data.Models.Environment", "Environment")
                        .WithMany("SwitchInstances")
                        .HasForeignKey("EnvironmentId");

                    b.HasOne("Switchcraft.Data.Models.Switch", "Switch")
                        .WithMany("SwitchInstances")
                        .HasForeignKey("SwitchId");

                    b.Navigation("Environment");

                    b.Navigation("Switch");
                });

            modelBuilder.Entity("Switchcraft.Data.Models.Application", b =>
                {
                    b.Navigation("Switches");
                });

            modelBuilder.Entity("Switchcraft.Data.Models.Environment", b =>
                {
                    b.Navigation("SwitchInstances");
                });

            modelBuilder.Entity("Switchcraft.Data.Models.Switch", b =>
                {
                    b.Navigation("SwitchInstances");
                });
#pragma warning restore 612, 618
        }
    }
}
